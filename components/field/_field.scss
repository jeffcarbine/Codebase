:root {
  --field-background: var(--background);
  --field-toggle-background: var(--background-grey);
  --field-input-color: var(--foreground);
  --field-label-color: var(--foreground);
  --field-focus-color: var(--accent);
  --field-focus-opacity: 0.15;
  --field-border-width: 0.125rem;
  --field-border-color: var(--background-grey);
  --field-padding: 0.75rem;
  --field-toggle-color: var(--primary);

  --reorganizeItem-background: var(--background-grey);
}

@keyframes focus {
  from {
    opacity: var(--field-focus-opacity);
    transform: scale(1);
  }

  to {
    opacity: 0;
    transform: scale(750);
  }
}

.field {
  display: block;
  width: 100%;
  margin-bottom: 0.5rem;

  input,
  textarea,
  select {
    @include fontValues(10);
    outline: none;
    min-height: 3.75rem;
    font-family: var(--base-font-family);
    -webkit-appearance: none;
  }

  textarea {
    resize: none;
    line-height: var(--f9-line-height);
  }

  select {
    text-overflow: ellipsis;
    color: var(
      --field-background
    ) !important; // to keep it "transparent" so the faux-select can keep things centered
  }

  .wrapper {
    position: relative;
    overflow: hidden;
    margin: 0.5rem 0;
    display: block;

    &.overflow-visible {
      overflow: visible;
    }

    .faux-select {
      position: absolute;
      top: var(--field-border-width);
      left: var(--field-border-width);
      width: calc(100% - var(--field-border-width) * 2);
      height: calc(100% - var(--field-border-width) * 2);
      padding: var(--field-padding);
      box-sizing: border-box;
      pointer-events: none;
      display: flex;
      flex-direction: column;
      justify-content: center;
      white-space: nowrap;
      overflow: hidden;
      border-radius: var(--border-radius);

      &::before {
        content: "";
        width: 5rem;
        height: calc(100% - var(--field-border-width));
        position: absolute;
        top: 0;
        right: 0;
        background: linear-gradient(
          90deg,
          rgba(0, 0, 0, 0) 0%,
          var(--field-background) 50%,
          var(--field-background) 100%
        );
      }

      &::after {
        content: "";
        width: 0.75rem;
        height: 0.75rem;
        box-sizing: border-box;
        border-right: var(--field-border-width) solid var(--field-input-color);
        border-bottom: var(--field-border-width) solid var(--field-input-color);
        position: absolute;
        top: 50%;
        right: 1rem;
        transform: translateY(calc(-50% - 0.25rem)) rotate(45deg);
      }
    }

    &.has-prefix {
      input {
        padding-left: 1.75rem !important;
      }

      .prefix {
        position: absolute;
        top: 50%;
        left: 1rem;
        transform: translateY(-50%);
        display: block;
        width: 1rem;
        height: 1rem;
        fill: var(--field-input-color);
        color: var(--field-input-color);
      }
    }
  }

  fieldset.wrapper {
    padding: 0.5rem;
    box-sizing: border-box;
    border: var(--field-border-width) solid var(--field-border-color);
    border-radius: var(--border-radius);
    display: flex;

    legend {
      padding: 0.5rem 0.25rem;
    }

    .field {
      flex: 0 0 auto;
      width: auto;
      margin: 0 0.5rem;
    }
  }

  label {
    @include fontValues(10);
    color: var(--field-label-color);
    padding-top: 0.5rem;
  }

  .preview {
    display: block;
    width: 10rem;
    height: 10rem;
    object-fit: cover;
    background: var(--field-background);
    border-radius: var(--border-radius);
    margin: 0.5rem 0;
    position: relative;
    border: var(--field-border-width) solid var(--field-border-color);
    overflow: hidden;

    .imagePreview {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: contain;
      z-index: 1;
      opacity: 0;

      &.loaded {
        opacity: 1;
      }
    }

    .square {
      opacity: 0;
      pointer-events: none;
    }

    .icon {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      fill: var(--field-input-color);
      width: 25%;
      opacity: 0.5;
    }
  }

  .reorderList {
    margin: 0;
    padding: 0.5rem;

    .reorderItem {
      list-style-type: none;
      margin: 0.25rem 0;
      padding: 0.5rem;
      background: var(--reorganizeItem-background);
      border-radius: var(--border-radius);
      display: flex;
      transition: transform 0.25s ease;

      .handle {
        display: block;
        width: 2rem;
        height: 2rem;
        cursor: move;

        .icon {
          width: 100%;
          height: 100%;
        }
      }

      span {
        display: flex;
        flex-direction: column;
        justify-content: center;
      }

      &.dragging {
        transform: scale(1.1);
        box-shadow: var(--box-shadow);
        pointer-events: none;
      }
    }
  }

  .help {
    display: block;
    @include fontValues(11);
  }

  .validation {
    display: block;
    @include fontValues(11);
    color: var(--urgent);
  }

  // hande non-checkbox and non-radio
  &:not(.checkbox-field):not(.radio-field):not(.fullcheckbox-field):not(
      .fullradio-field
    ):not(.array-field):not(.toggledual-field) {
    label {
      display: block;
    }

    .wrapper {
      background: var(--field-background);
      border-radius: var(--border-radius);

      &.invalid {
        --border-color: var(--urgent);
      }

      .focus {
        content: "";
        display: block;
        position: absolute;
        top: 50%;
        left: 0;
        transform: translateY(-50%);
        background: var(--field-focus-color);
        opacity: 0;
        width: 1px;
        height: 1px;
        border-radius: 50%;
        pointer-events: none;
      }
    }

    input,
    textarea,
    select {
      display: block;
      padding: var(--field-padding);
      box-sizing: border-box;
      border: 0.125rem solid var(--field-border-color);
      border-radius: var(--border-radius);
      transition: border-color 0.5s ease;
      transition-delay: 0.25s;
      color: var(--field-input-color);
      width: 100%;
      background: transparent;
      margin: 0;

      &:focus {
        border-color: var(--field-focus-color);

        + .focus {
          animation: focus 1s forwards;
          animation-delay: 0.01s;
        }
      }
    }
  }

  &.checkbox-field,
  &.radio-field {
    display: flex;
    flex-wrap: wrap;

    .wrapper {
      flex: 2rem 0 0;
      padding: 0;

      input {
        min-height: 0;
        -webkit-appearance: auto;
        opacity: 0;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        pointer-events: none;

        &[disabled] {
          + .pseudo {
            opacity: 0.5;
          }
        }

        &:checked {
          + .pseudo {
            background-color: var(--accent);

            &::before {
              opacity: 1;
              transform: translate(-50%, -75%) rotate(-45deg) scale(1);
            }
          }
        }
      }

      .pseudo {
        display: block;
        width: 2rem;
        height: 2rem;
        background-color: var(--field-background);
        border: var(--field-border-width) solid var(--field-border-color);
        box-sizing: border-box;
        transition: background-color 0.25s ease;

        &::before {
          content: "";
          width: 0.75rem;
          height: 0.375rem;
          border-left: 0.125rem solid var(--accent-on);
          border-bottom: 0.125rem solid var(--accent-on);
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -75%) rotate(-45deg) scale(3);
          opacity: 0;
          transition: opacity 0.125s ease, transform 0.125s ease;
        }
      }
    }

    label {
      flex: 0 0 auto;
      padding: 0 0 0 0.5rem;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }

    .help,
    .validation {
      flex: 0 0 100%;
    }
  }

  &.fullcheckbox-field,
  &.fullradio-field {
    position: relative;

    input {
      min-height: 0;
      -webkit-appearance: auto;
      opacity: 0;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      pointer-events: none;
    }

    input:checked + label {
      background-color: var(--accent);
      color: var(--accent-on);
    }

    label {
      padding-top: 0;
      height: 3rem;
      width: 100%;
      border-radius: var(--border-radius);
      border: var(--field-border-width) solid var(--field-border-color);
      display: flex;
      flex-direction: column;
      justify-content: center;
      box-sizing: border-box;
      background: var(--field-background);
      transition: background-color 0.25s ease, color 0.25s ease;
    }
  }

  &.toggledual-field {
    position: relative;

    input {
      min-height: 0;
      -webkit-appearance: auto;
      opacity: 0;
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;

      &:nth-of-type(1) {
        left: 0;
      }

      &:nth-of-type(2) {
        right: 0;
      }
    }

    .wrapper {
      display: flex;
      overflow: visible;

      label {
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 0;
      }

      .toggle {
        flex: 0 0 3.5rem;
        margin: 0 0.5rem;
        border-radius: 25px;
        height: 1.5rem;
        position: relative;
        border: var(--field-border-width) solid var(--field-border-color);
        background: var(--field-background);

        &::before {
          content: "";
          display: block;
          width: 2rem;
          height: 2rem;
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          border-radius: 50%;
          background: var(--field-toggle-color);
          box-shadow: var(--box-shadow);
          transition: transform 0.25s ease;
        }
      }

      &[data-toggled="1"] {
        .toggle {
          &::before {
            transform: translate(-100%, -50%);
          }
        }
      }

      &[data-toggled="2"] {
        .toggle {
          &::before {
            transform: translate(0%, -50%);
          }
        }
      }
    }
  }
}
